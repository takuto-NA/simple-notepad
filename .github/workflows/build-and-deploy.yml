name: Build and Deploy
on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  # デスクトップ版ビルド（タグpush または手動実行時のみ）
  build-desktop:
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' || (github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]'))
    strategy:
      matrix:
        platform: [macos-latest, ubuntu-22.04, windows-latest]
    runs-on: ${{ matrix.platform }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
        
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-store-
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libsoup-3.0-dev \
            libjavascriptcoregtk-4.1-dev \
            libgtk-4-dev \
            libadwaita-1-dev \
            pkg-config \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev
        
      - name: Set environment variables for Linux
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
        
      - name: Install dependencies
        run: pnpm install
        
      - name: Build Desktop App
        run: pnpm build:tauri
        
      - name: Upload Desktop Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: desktop-${{ matrix.platform }}
          path: src-tauri/target/release/bundle/

  # GitHub Release作成（タグpush時のみ）
  create-release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build-desktop
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: Display structure of downloaded files
        run: ls -la artifacts/
      
      - name: Prepare release files
        run: |
          mkdir -p release-files
          
          # Windows files
          if [ -d "artifacts/desktop-windows-latest" ]; then
            find artifacts/desktop-windows-latest -name "*.msi" -o -name "*.exe" | while read file; do
              cp "$file" release-files/
            done
          fi
          
          # macOS files  
          if [ -d "artifacts/desktop-macos-latest" ]; then
            find artifacts/desktop-macos-latest -name "*.dmg" -o -name "*.app.tar.gz" | while read file; do
              cp "$file" release-files/
            done
          fi
          
          # Linux files
          if [ -d "artifacts/desktop-ubuntu-22.04" ]; then
            find artifacts/desktop-ubuntu-22.04 -name "*.deb" -o -name "*.AppImage" | while read file; do
              cp "$file" release-files/
            done
          fi
          
          echo "Release files prepared:"
          ls -la release-files/
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            🚀 シンプルメモ帳 ${{ github.ref_name }} をリリースしました
            
            ## 💾 ダウンロード
            - **Windows**: `.msi` または `.exe` ファイル
            - **macOS**: `.dmg` または `.app.tar.gz` ファイル  
            - **Linux**: `.deb` または `.AppImage` ファイル
            
            ## 🌐 Web体験版
            [ブラウザで今すぐ試す](https://takuto-na.github.io/simple-notepad/)
            
            ## 📱 モバイル対応
            このバージョンではスマホ・タブレット対応が改善されました！
            
            ## 🛠️ インストール方法
            1. お使いのOSに対応したファイルをダウンロード
            2. ダウンロードしたファイルを実行してインストール
            3. 「シンプルメモ帳」を起動して利用開始！
          files: release-files/*
          draft: false
          prerelease: false

  # Web版デプロイ（GitHub Pages）
  deploy-web:
    runs-on: ubuntu-latest
    # mainブランチpush時のみ実行（タグpush時は除外）
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
        
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-store-
        
      - name: Install dependencies
        run: pnpm install
        
      - name: Build Web Version
        run: pnpm build:web
        
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist-web
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 