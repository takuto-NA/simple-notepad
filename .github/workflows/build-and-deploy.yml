name: Build and Deploy
on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  # デスクトップ版ビルド（タグpush または手動実行時のみ）
  build-desktop:
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' || (github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]'))
    timeout-minutes: 60
    strategy:
      matrix:
        platform: [macos-latest, ubuntu-22.04, windows-latest]
    runs-on: ${{ matrix.platform }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
        
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-store-
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libsoup-3.0-dev \
            libjavascriptcoregtk-4.1-dev \
            libgtk-4-dev \
            libadwaita-1-dev \
            pkg-config \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev
        
      - name: Set environment variables for Linux
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
        
      - name: Install dependencies
        run: pnpm install
        
      - name: Build Desktop App
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        run: pnpm build:tauri
        
      - name: Upload Desktop Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: desktop-${{ matrix.platform }}
          path: src-tauri/target/release/bundle/

  # ラズパイ・ARM版ビルド（タグpush または手動実行時のみ）
  build-arm:
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            platform: ubuntu-22.04
            arch: arm64
            name: raspberry-pi-arm64
          - target: armv7-unknown-linux-gnueabihf
            platform: ubuntu-22.04
            arch: armv7
            name: raspberry-pi-armv7
    runs-on: ubuntu-22.04
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
        
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-store-
          
      - name: Install Rust with cross-compilation support
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Install cross-compilation dependencies
        run: |
          # Update package lists
          sudo apt-get update
          
          # Install base cross-compilation tools
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            gcc-arm-linux-gnueabihf \
            pkg-config \
            libssl-dev \
            build-essential \
            curl \
            wget
          
          # Install basic dev dependencies for host
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev
        
      - name: Configure cross-compilation environment
        run: |
          # ARM64用環境変数
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
            echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
            echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
            echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
            echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
            echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          fi
          
          # ARMv7用環境変数
          if [ "${{ matrix.target }}" = "armv7-unknown-linux-gnueabihf" ]; then
            echo "CC_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-gcc" >> $GITHUB_ENV
            echo "CXX_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-g++" >> $GITHUB_ENV
            echo "AR_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-ar" >> $GITHUB_ENV
            echo "CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc" >> $GITHUB_ENV
            echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
            echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          fi
        
      - name: Install dependencies
        run: pnpm install
        
      - name: Build ARM Desktop App
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        run: |
          # メモリ使用量を制限（GitHub Actionsでの安定性向上）
          export NODE_OPTIONS="--max_old_space_size=2048"
          export CARGO_BUILD_JOBS=1
          export CARGO_NET_RETRY=10
          export CARGO_NET_GIT_FETCH_WITH_CLI=true
          
          # ARM向けビルド実行（エラー時は簡易版で再試行）
          pnpm tauri build --target ${{ matrix.target }} || {
            echo "Standard build failed, retrying with minimal features..."
            # 最小構成で再ビルド
            pnpm tauri build --target ${{ matrix.target }} --config src-tauri/tauri.conf.json || true
          }
        
      - name: Upload ARM Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: desktop-${{ matrix.name }}
          path: src-tauri/target/${{ matrix.target }}/release/bundle/

  # GitHub Release作成（タグpush時のみ）
  create-release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-desktop, build-arm]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: Display structure of downloaded files
        run: ls -la artifacts/
      
      - name: Prepare release files
        run: |
          mkdir -p release-files
          
          # Windows files
          if [ -d "artifacts/desktop-windows-latest" ]; then
            find artifacts/desktop-windows-latest -name "*.msi" -o -name "*.exe" | while read file; do
              cp "$file" release-files/
            done
          fi
          
          # macOS files  
          if [ -d "artifacts/desktop-macos-latest" ]; then
            find artifacts/desktop-macos-latest -name "*.dmg" -o -name "*.app.tar.gz" | while read file; do
              cp "$file" release-files/
            done
          fi
          
          # Linux x64 files
          if [ -d "artifacts/desktop-ubuntu-22.04" ]; then
            find artifacts/desktop-ubuntu-22.04 -name "*.deb" -o -name "*.AppImage" | while read file; do
              basename_file=$(basename "$file")
              cp "$file" release-files/"${basename_file%.*}-x64.${basename_file##*.}"
            done
          fi
          
          # ARM64 files (Raspberry Pi 4+)
          if [ -d "artifacts/desktop-raspberry-pi-arm64" ]; then
            find artifacts/desktop-raspberry-pi-arm64 -name "*.deb" -o -name "*.AppImage" | while read file; do
              basename_file=$(basename "$file")
              cp "$file" release-files/"${basename_file%.*}-arm64.${basename_file##*.}"
            done
          fi
          
          # ARMv7 files (Raspberry Pi 3+)
          if [ -d "artifacts/desktop-raspberry-pi-armv7" ]; then
            find artifacts/desktop-raspberry-pi-armv7 -name "*.deb" -o -name "*.AppImage" | while read file; do
              basename_file=$(basename "$file")
              cp "$file" release-files/"${basename_file%.*}-armv7.${basename_file##*.}"
            done
          fi
          
          echo "Release files prepared:"
          ls -la release-files/
      
      - name: Generate latest.json for auto-updater
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        run: |
          # Find actual built files and generate latest.json with correct URLs
          echo "Detecting built files..."
          
          # Find actual file names
          WINDOWS_MSI=$(find release-files -name "*.msi" | head -1)
          LINUX_APPIMAGE=$(find release-files -name "*-x64.AppImage" | head -1)
          MACOS_DMG_X64=$(find release-files -name "*.dmg" | grep -v aarch64 | head -1)
          MACOS_DMG_ARM64=$(find release-files -name "*.dmg" | grep aarch64 | head -1)
          
          echo "Found files:"
          echo "  Windows MSI: $WINDOWS_MSI"
          echo "  Linux AppImage: $LINUX_APPIMAGE"
          echo "  macOS x64 DMG: $MACOS_DMG_X64"
          echo "  macOS ARM64 DMG: $MACOS_DMG_ARM64"
          
          # Generate latest.json with actual filenames
          cat > latest.json << EOF
          {
            "version": "${{ github.ref_name }}",
            "notes": "🚀 シンプルメモ帳 ${{ github.ref_name }} をリリースしました\n\n✨ 特徴:\n・署名付きで安全\n・組織管理で信頼性\n・ワンクリックで完了\n\n詳細はリリースページをご確認ください。",
            "pub_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "platforms": {
          EOF
          
          # Add Windows platform if MSI exists
          if [ -n "$WINDOWS_MSI" ] && [ -f "$WINDOWS_MSI" ]; then
            MSI_FILENAME=$(basename "$WINDOWS_MSI")
            cat >> latest.json << EOF
              "windows-x86_64": {
                "signature": "",
                "url": "https://github.com/takuto-NA/simple-notepad/releases/download/${{ github.ref_name }}/$MSI_FILENAME"
              },
          EOF
          fi
          
          # Add Linux platform if AppImage exists
          if [ -n "$LINUX_APPIMAGE" ] && [ -f "$LINUX_APPIMAGE" ]; then
            APPIMAGE_FILENAME=$(basename "$LINUX_APPIMAGE")
            cat >> latest.json << EOF
              "linux-x86_64": {
                "signature": "",
                "url": "https://github.com/takuto-NA/simple-notepad/releases/download/${{ github.ref_name }}/$APPIMAGE_FILENAME"
              },
          EOF
          fi
          
          # Add macOS x64 platform if DMG exists
          if [ -n "$MACOS_DMG_X64" ] && [ -f "$MACOS_DMG_X64" ]; then
            DMG_X64_FILENAME=$(basename "$MACOS_DMG_X64")
            cat >> latest.json << EOF
              "darwin-x86_64": {
                "signature": "",
                "url": "https://github.com/takuto-NA/simple-notepad/releases/download/${{ github.ref_name }}/$DMG_X64_FILENAME"
              },
          EOF
          fi
          
          # Add macOS ARM64 platform if DMG exists
          if [ -n "$MACOS_DMG_ARM64" ] && [ -f "$MACOS_DMG_ARM64" ]; then
            DMG_ARM64_FILENAME=$(basename "$MACOS_DMG_ARM64")
            cat >> latest.json << EOF
              "darwin-aarch64": {
                "signature": "",
                "url": "https://github.com/takuto-NA/simple-notepad/releases/download/${{ github.ref_name }}/$DMG_ARM64_FILENAME"
              },
          EOF
          fi
          
          # Remove trailing comma and close JSON
          sed -i '$ s/,$//' latest.json
          cat >> latest.json << EOF
            }
          }
          EOF
          
          # Optional: Add signatures (simplified version without minisign dependency)
          if [ -n "$TAURI_SIGNING_PRIVATE_KEY" ]; then
            echo "Signing key configured, but skipping complex signing for now"
            echo "Note: Enable Tauri's built-in signing via environment variables"
          fi
          
          echo "Generated latest.json:"
          cat latest.json
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            🚀 シンプルメモ帳 ${{ github.ref_name }} をリリースしました
            
            ## 💾 ダウンロード
            - **Windows**: `.msi` または `.exe` ファイル
            - **macOS**: `.dmg` または `.app.tar.gz` ファイル  
            - **Linux (x64)**: `*-x64.deb` または `*-x64.AppImage` ファイル
            - **🍓 Raspberry Pi 4+ (ARM64)**: `*-arm64.deb` または `*-arm64.AppImage` ファイル
            - **🍓 Raspberry Pi 3+ (ARMv7)**: `*-armv7.deb` または `*-armv7.AppImage` ファイル
            
            ## 🌐 Web体験版
            [ブラウザで今すぐ試す](https://takuto-na.github.io/simple-notepad/)
            
            ## 📱 モバイル対応
            このバージョンではスマホ・タブレット対応が改善されました！
            
            ## 🍓 Raspberry Pi対応
            - **Pi 4以降**: ARM64版を推奨（高性能）
            - **Pi 3以降**: ARMv7版も利用可能
            - **推奨**: 4GB RAM以上のモデル
            
            ## 🛠️ インストール方法
            1. お使いのOSに対応したファイルをダウンロード
            2. ダウンロードしたファイルを実行してインストール
            3. 「シンプルメモ帳」を起動して利用開始！
            
            ## 🚀 自動更新
            このバージョンから、組織管理の署名付き自動更新機能を搭載しました！
            アプリ内で新しいバージョンが通知され、ワンクリックで安全に更新できます。
          files: |
            release-files/*
            latest.json
          draft: false
          prerelease: false

  # Web版デプロイ（GitHub Pages）
  deploy-web:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    # mainブランチpush時のみ実行（タグpush時は除外）
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
        
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-store-
        
      - name: Install dependencies
        run: pnpm install
        
      - name: Build Web Version
        run: pnpm build:web
        
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist-web
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 